"""
Django settings for bpjvote project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

from django.contrib import messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=xl1#-79sat6wejv9!3ne07c$bw6xat5rn(am)!#^*ugha0d@%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'django.contrib.sessions', # Replaced with QSession,
    'qsessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'auditlog',
    'axes',
    'django_ratelimit',
    # 'django_recaptcha',
    'turnstile',
    "debug_toolbar",
    'cachalot',
    'sorl.thumbnail',
    'django_prometheus',

    "crispy_forms",
    "crispy_bootstrap5",

    'main',
    'vote',
]

MIDDLEWARE = [
'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'x_forwarded_for.middleware.XForwardedForMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware', # Replaced with QSession
    'qsessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'auditlog.middleware.AuditlogMiddleware',
    # AxesMiddleware should be the last middleware in the MIDDLEWARE list.
    'axes.middleware.AxesMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'bpjvote.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        "DIRS": [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend',
    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

WSGI_APPLICATION = 'bpjvote.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_prometheus.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fa-ir'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_ROOT = "media/"
MEDIA_URL = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
#
CACHES = {
    "default": {
        "BACKEND": "django_valkey.cache.ValkeyCache",
        "LOCATION": "valkey://127.0.0.1:6379",
        }
    }

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_info.log'),
            'maxBytes': 5 * 1024 * 1024,  # 5 MB
            'backupCount': 1000,  # Keep the last 5 log files
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_errors.log'),
            'maxBytes': 5 * 1024 * 1024,  # 5 MB
            'backupCount': 1000,  # Keep the last 5 log files
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
            'include_html': True,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['error_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['error_file', 'mail_admins'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}


PROMETHEUS_METRIC_NAMESPACE = "bpjvote"

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'main.user'

RECAPTCHA_PUBLIC_KEY = '6Lc8NSApAAAAAEwCzoZguReuhgVj9LZPNFF5jGo0'
RECAPTCHA_PRIVATE_KEY = '6Lc8NSApAAAAAKtGVUM6H2jSWTC8iAF1lqoQaA97'
RECAPTCHA_REQUIRED_SCORE = 0.85

TURNSTILE_SITEKEY = '0x4AAAAAAAxiHy_NJkcaI-wr'
TURNSTILE_SECRET = '0x4AAAAAAAxiH1TYrp-Mvc8EE7O4uvtCxyE'
TURNSTILE_DEFAULT_CONFIG = {
    'theme': 'light',  # do not use data- prefix
    'language': 'fa'
}

MESSAGE_TAGS = {
    messages.DEBUG: 'bg-info',
    messages.INFO: 'bg-info',
    messages.SUCCESS: 'bg-success',
    messages.WARNING: 'bg-warning',
    messages.ERROR: 'bg-danger',
}

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
# QSsssion Engine: # TODO : replace with cached_db
SESSION_ENGINE = 'qsessions.backends.db'

# Redirect the user to this URL after logging in
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/login/'
# Redirect the user to this URL after logging out
LOGOUT_REDIRECT_URL = '/login/'
# Crispy Form
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

AUDITLOG_INCLUDE_ALL_MODELS = True

AXES_FAILURE_LIMIT = 15
AXES_COOLOFF_TIME = 15
AXES_LOCKOUT_TEMPLATE = "lockout.html"

THUMBNAIL_PADDING = True
# THUMBNAIL_PRESERVE_FORMAT = True



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.srbiau.ac.ir'  # Replace 'smtp.example.com' with your SMTP server hostname
EMAIL_PORT = 587  # Replace '587' with your SMTP server port number
EMAIL_HOST_USER = 'bpj@srbiau.ac.ir'  # Replace 'your_email@example.com' with your email address
EMAIL_HOST_PASSWORD = 'BpjEmail@2024'  # Replace 'your_email_password' with your email password
EMAIL_USE_TLS = False  # Set it to 'True' if your SMTP server uses TLS encryption
EMAIL_NAME = 'سامانه انتخابات آنلاین انجمن های علمی باشگاه پژوهشگران جوان و نخبگان علوم و تحقیقات',
SEND_EMAIL = False


SMS_SETTINGS = {
    'SMS_APIKEY': "SJ3fSArCxdYIMzslMRTf0wJDFttz4XyIyPsoASvBR5I=",
    'PATTERN_ID': 'ei0i5adfbclxom1',
    'SMS_SENDER': "+983000505",
}
SEND_SMS = True

# CACHALOT_ONLY_CACHABLE_TABLES = ""
CACHALOT_UNCACHABLE_TABLES = frozenset(('django_migrations', 'vote_vote', 'vote_voter'))


DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.history.HistoryPanel',
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.alerts.AlertsPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'debug_toolbar.panels.profiling.ProfilingPanel',
    'cachalot.panels.CachalotPanel',
]

# Define the time range during which creation is disallowed
NOVOTE_START_HOUR = 23
NOVOTE_END_HOUR = 9
FORCE_TIME = True
VOTING_ENABLED = True